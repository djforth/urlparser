{"version":3,"sources":["src/urlparser.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["class URLParser{\n  checkSlash(p){\n    // IE Check as IE does not process pre /\n    let slash_test = p.match('^/');\n\n    return slash_test != null;\n  }\n\n  createParsedURL(){\n    // ['http://www.test.com:3000/mytest/test/123?test=foo&test2=bar#hash1/hash2', 'http', '//', 'www.test.com', '3000', 'mytest/test/123', 'test=foo&test2=bar', 'hash1/hash2']\n    if (this.uri_split){\n      this.uri_parsed = {\n        fullpath: this.uri_split[0]\n        , protocol: this.uri_split[1] // => \"http:\"\n        , hostname: this.uri_split[3] // => \"example.com\"\n        , port: this.uri_split[4] // => \"3000\"\n        , pathname: this.uri_split[5] // => \"pathname/test\"\n        , pathsplit: this.splitPath(this.uri_split[5])  // => \"['pathname', 'test']\"\n        , fullquery: this.uri_split[6]  // => \"?search=test\"\n        , query: this.parseQuery(this.uri_split[6]) // {seach:\"test\"}\n        , hash: this.uri_split[7] // => \"#hash\"\n      };\n\n      return this.uri_parsed;\n    }\n\n    return null;\n  }\n\n\n  constructor(path){\n    // Setup\n    this.uri, this.uri_parsed, this.uri_split;\n\n    // Gets existing path unless passed to path\n    this.uri = (path != undefined) ? path : this.getURL();\n\n    // Parsing\n    this.uri_split = this.parseURL();\n\n    if (this.uri_split){\n      this.createParsedURL();\n    }\n  }\n\n  getProperty(prop){\n    let start = prop.search(/\\[/g);\n    let end = prop.search(/\\]/g);\n    return (start < end) ? prop.slice(start+1, end) : prop;\n  }\n\n  // <<<<<< Get properties >>>>>>\n\n  getHostname(){\n    return (this.uri_parsed) ? this.uri_parsed.hostname : null;\n  }\n\n  getFullPath(){\n    return (this.uri_parsed) ? this.uri_parsed.fullpath : null;\n  }\n\n  getHash(){\n    return (this.uri_parsed) ? this.uri_parsed.hash : null;\n  }\n\n  getPathname(){\n    return (this.uri_parsed) ? this.uri_parsed.pathname : null;\n  }\n\n  getPort(){\n    return (this.uri_parsed) ? this.uri_parsed.port : null;\n  }\n\n  getProtocol(){\n    return (this.uri_parsed) ? this.uri_parsed.protocol : null;\n  }\n\n  getQueryString(){\n    return (this.uri_parsed) ? this.uri_parsed.fullquery : null;\n  }\n\n  getSplitPath(){\n    return (this.uri_parsed) ? this.uri_parsed.pathsplit : null;\n  }\n\n  getQueryObj(){\n    return (this.uri_parsed) ? this.uri_parsed.query : null;\n  }\n\n\n  getURL(){\n    // Gets Current Path\n    let url = decodeURIComponent(window.location.href);\n    return url;\n  }\n\n\n  parseQuery(queryString){\n    let qs, queries, params, temp, t, i, l;\n    // Parse query into an object - http://www.joezimjs.com/javascript/3-ways-to-parse-a-query-string-in-a-url/\n    if (queryString){\n      qs = queryString.replace(/^\\?/, '');\n\n      queries = qs.split('&');\n\n      params  = (queries.length >= 1 && queries[0] != '') ? {} : null;\n\n      if (params){\n        l=queries.length;\n        for (i=0; i < l; i++){\n          temp = queries[i].split('=');\n          t = temp[0];\n          params[t] = temp[1];\n        }\n      }\n\n      return params;\n    }\n\n    return null;\n  }\n\n\n  parseURL(){\n    // Regex taken from is from javascript, the good parts by Douglas Crockford - Best performance (http://jsperf.com/url-parse2)\n    const parse_url = /^(?:([A-Za-z]+):)?(\\/{0,3})([0-9.\\-A-Za-z]+)(?::(\\d+))?(?:\\/([^?#]*))?(?:\\?([^#]*))?(?:#(.*))?$/;\n\n    return this.uri.match(parse_url);\n  }\n\n  splitPath(p){\n    // Splits path into array\n    let split = p.split('/');\n\n    if (this.checkSlash(p)){\n      split.shift();\n    }\n    return split;\n  }\n}\n\nexport default URLParser;\n\n\n"]}